name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Add workflow dispatch for manual releases
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (debug/release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --set-exit-if-changed .
        
      - name: Analyze project source
        run: flutter analyze
        
      - name: Run tests
        run: flutter test
        
  build-android:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Get version
        id: get_version
        run: echo "VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')" >> $GITHUB_OUTPUT
        
      - name: Build Debug APK
        if: github.event.inputs.release_type != 'release'
        run: flutter build apk --debug
        
      - name: Build Release APK
        if: github.event.inputs.release_type == 'release'
        run: flutter build apk --release
        
      - name: Upload Debug APK
        if: github.event.inputs.release_type != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: build/app/outputs/flutter-apk/app-debug.apk
          
      - name: Upload Release APK
        if: github.event.inputs.release_type == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          
      - name: Create Release
        if: github.event.inputs.release_type == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/app-release.apk
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  build-ios:
    needs: test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Get version
        id: get_version
        run: echo "VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')" >> $GITHUB_OUTPUT
        
      - name: Build Debug iOS
        if: github.event.inputs.release_type != 'release'
        run: flutter build ios --debug --no-codesign
        
      - name: Build Release iOS
        if: github.event.inputs.release_type == 'release'
        run: flutter build ios --release --no-codesign
        
      - name: Upload Debug iOS
        if: github.event.inputs.release_type != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ios-debug
          path: build/ios/iphoneos/Runner.app
          
      - name: Upload Release iOS
        if: github.event.inputs.release_type == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: build/ios/iphoneos/Runner.app
          
      - name: Create Release
        if: github.event.inputs.release_type == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: build/ios/iphoneos/Runner.app
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}